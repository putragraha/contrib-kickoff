// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.nsystem.features.reposearch.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class RepoSearchItemsResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<RepoSearchItemsResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "node_id", "name",
      "full_name", "private", "owner", "html_url", "description", "fork", "url", "forks_url",
      "keys_url", "collaborators_url", "teams_url", "hooks_url", "issue_events_url", "events_url",
      "assignees_url", "branches_url", "tags_url", "blobs_url", "git_tags_url", "git_refs_url",
      "trees_url", "statuses_url", "languages_url", "stargazers_url", "contributors_url",
      "subscribers_url", "subscriptions_url", "commits_url", "git_commits_url", "comments_url",
      "issue_comments_url", "contents_url", "compare_url", "merges_url", "archive_url",
      "downloads_url", "issues_url", "pulls_url", "milestones_url", "notifications_url",
      "labels_url", "releases_url", "deployments_url", "created_at", "updated_at", "pushed_at",
      "git_url", "ssh_url", "clone_url", "svn_url", "homepage", "size", "stargazers_count",
      "watchers_count", "language", "has_issues", "has_projects", "has_downloads", "has_wiki",
      "has_pages", "forks_count", "mirror_url", "archived", "disabled", "open_issues_count",
      "allow_forking", "is_template", "visibility", "forks", "open_issues", "watchers",
      "default_branch", "score")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "id")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "nodeId")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "private")

  private val nullableOwnerResponseAdapter: JsonAdapter<OwnerResponse?> =
      moshi.adapter(OwnerResponse::class.java, emptySet(), "owner")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "size")

  public override fun toString(): String = buildString(45) {
      append("GeneratedJsonAdapter(").append("RepoSearchItemsResponse").append(')') }

  public override fun fromJson(reader: JsonReader): RepoSearchItemsResponse {
    var id: Long? = null
    var nodeId: String? = null
    var name: String? = null
    var fullName: String? = null
    var private_: Boolean? = null
    var owner: OwnerResponse? = null
    var htmlUrl: String? = null
    var description: String? = null
    var fork: Boolean? = null
    var url: String? = null
    var forksUrl: String? = null
    var keysUrl: String? = null
    var collaboratorsUrl: String? = null
    var teamsUrl: String? = null
    var hooksUrl: String? = null
    var issueEventsUrl: String? = null
    var eventsUrl: String? = null
    var assigneesUrl: String? = null
    var branchesUrl: String? = null
    var tagsUrl: String? = null
    var blobsUrl: String? = null
    var gitTagsUrl: String? = null
    var gitRefsUrl: String? = null
    var treesUrl: String? = null
    var statusesUrl: String? = null
    var languagesUrl: String? = null
    var stargazersUrl: String? = null
    var contributorsUrl: String? = null
    var subscribersUrl: String? = null
    var subscriptionsUrl: String? = null
    var commitsUrl: String? = null
    var gitCommitsUrl: String? = null
    var commentsUrl: String? = null
    var issueCommentsUrl: String? = null
    var contentsUrl: String? = null
    var compareUrl: String? = null
    var mergesUrl: String? = null
    var archiveUrl: String? = null
    var downloadsUrl: String? = null
    var issuesUrl: String? = null
    var pullsUrl: String? = null
    var milestonesUrl: String? = null
    var notificationsUrl: String? = null
    var labelsUrl: String? = null
    var releasesUrl: String? = null
    var deploymentsUrl: String? = null
    var createdAt: String? = null
    var updatedAt: String? = null
    var pushedAt: String? = null
    var gitUrl: String? = null
    var sshUrl: String? = null
    var cloneUrl: String? = null
    var svnUrl: String? = null
    var homepage: String? = null
    var size: Int? = null
    var stargazersCount: Int? = null
    var watchersCount: Int? = null
    var language: String? = null
    var hasIssues: Boolean? = null
    var hasProjects: Boolean? = null
    var hasDownloads: Boolean? = null
    var hasWiki: Boolean? = null
    var hasPages: Boolean? = null
    var forksCount: Int? = null
    var mirrorUrl: String? = null
    var archived: Boolean? = null
    var disabled: Boolean? = null
    var openIssuesCount: Int? = null
    var allowForking: Boolean? = null
    var isTemplate: Boolean? = null
    var visibility: String? = null
    var forks: Int? = null
    var openIssues: Int? = null
    var watchers: Int? = null
    var defaultBranch: Int? = null
    var score: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> nodeId = nullableStringAdapter.fromJson(reader)
        2 -> name = nullableStringAdapter.fromJson(reader)
        3 -> fullName = nullableStringAdapter.fromJson(reader)
        4 -> private_ = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("private_",
            "private", reader)
        5 -> owner = nullableOwnerResponseAdapter.fromJson(reader)
        6 -> htmlUrl = nullableStringAdapter.fromJson(reader)
        7 -> description = nullableStringAdapter.fromJson(reader)
        8 -> fork = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("fork", "fork",
            reader)
        9 -> url = nullableStringAdapter.fromJson(reader)
        10 -> forksUrl = nullableStringAdapter.fromJson(reader)
        11 -> keysUrl = nullableStringAdapter.fromJson(reader)
        12 -> collaboratorsUrl = nullableStringAdapter.fromJson(reader)
        13 -> teamsUrl = nullableStringAdapter.fromJson(reader)
        14 -> hooksUrl = nullableStringAdapter.fromJson(reader)
        15 -> issueEventsUrl = nullableStringAdapter.fromJson(reader)
        16 -> eventsUrl = nullableStringAdapter.fromJson(reader)
        17 -> assigneesUrl = nullableStringAdapter.fromJson(reader)
        18 -> branchesUrl = nullableStringAdapter.fromJson(reader)
        19 -> tagsUrl = nullableStringAdapter.fromJson(reader)
        20 -> blobsUrl = nullableStringAdapter.fromJson(reader)
        21 -> gitTagsUrl = nullableStringAdapter.fromJson(reader)
        22 -> gitRefsUrl = nullableStringAdapter.fromJson(reader)
        23 -> treesUrl = nullableStringAdapter.fromJson(reader)
        24 -> statusesUrl = nullableStringAdapter.fromJson(reader)
        25 -> languagesUrl = nullableStringAdapter.fromJson(reader)
        26 -> stargazersUrl = nullableStringAdapter.fromJson(reader)
        27 -> contributorsUrl = nullableStringAdapter.fromJson(reader)
        28 -> subscribersUrl = nullableStringAdapter.fromJson(reader)
        29 -> subscriptionsUrl = nullableStringAdapter.fromJson(reader)
        30 -> commitsUrl = nullableStringAdapter.fromJson(reader)
        31 -> gitCommitsUrl = nullableStringAdapter.fromJson(reader)
        32 -> commentsUrl = nullableStringAdapter.fromJson(reader)
        33 -> issueCommentsUrl = nullableStringAdapter.fromJson(reader)
        34 -> contentsUrl = nullableStringAdapter.fromJson(reader)
        35 -> compareUrl = nullableStringAdapter.fromJson(reader)
        36 -> mergesUrl = nullableStringAdapter.fromJson(reader)
        37 -> archiveUrl = nullableStringAdapter.fromJson(reader)
        38 -> downloadsUrl = nullableStringAdapter.fromJson(reader)
        39 -> issuesUrl = nullableStringAdapter.fromJson(reader)
        40 -> pullsUrl = nullableStringAdapter.fromJson(reader)
        41 -> milestonesUrl = nullableStringAdapter.fromJson(reader)
        42 -> notificationsUrl = nullableStringAdapter.fromJson(reader)
        43 -> labelsUrl = nullableStringAdapter.fromJson(reader)
        44 -> releasesUrl = nullableStringAdapter.fromJson(reader)
        45 -> deploymentsUrl = nullableStringAdapter.fromJson(reader)
        46 -> createdAt = nullableStringAdapter.fromJson(reader)
        47 -> updatedAt = nullableStringAdapter.fromJson(reader)
        48 -> pushedAt = nullableStringAdapter.fromJson(reader)
        49 -> gitUrl = nullableStringAdapter.fromJson(reader)
        50 -> sshUrl = nullableStringAdapter.fromJson(reader)
        51 -> cloneUrl = nullableStringAdapter.fromJson(reader)
        52 -> svnUrl = nullableStringAdapter.fromJson(reader)
        53 -> homepage = nullableStringAdapter.fromJson(reader)
        54 -> size = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("size", "size",
            reader)
        55 -> stargazersCount = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("stargazersCount", "stargazers_count", reader)
        56 -> watchersCount = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("watchersCount", "watchers_count", reader)
        57 -> language = nullableStringAdapter.fromJson(reader)
        58 -> hasIssues = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("hasIssues",
            "has_issues", reader)
        59 -> hasProjects = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("hasProjects", "has_projects", reader)
        60 -> hasDownloads = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("hasDownloads", "has_downloads", reader)
        61 -> hasWiki = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("hasWiki",
            "has_wiki", reader)
        62 -> hasPages = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("hasPages",
            "has_pages", reader)
        63 -> forksCount = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("forksCount",
            "forks_count", reader)
        64 -> mirrorUrl = nullableStringAdapter.fromJson(reader)
        65 -> archived = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("archived",
            "archived", reader)
        66 -> disabled = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("disabled",
            "disabled", reader)
        67 -> openIssuesCount = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("openIssuesCount", "open_issues_count", reader)
        68 -> allowForking = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("allowForking", "allow_forking", reader)
        69 -> isTemplate = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("isTemplate", "is_template", reader)
        70 -> visibility = nullableStringAdapter.fromJson(reader)
        71 -> forks = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("forks", "forks",
            reader)
        72 -> openIssues = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("openIssues",
            "open_issues", reader)
        73 -> watchers = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("watchers",
            "watchers", reader)
        74 -> defaultBranch = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("defaultBranch", "default_branch", reader)
        75 -> score = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("score", "score",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return RepoSearchItemsResponse(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        nodeId = nodeId,
        name = name,
        fullName = fullName,
        `private` = private_ ?: throw Util.missingProperty("private_", "private", reader),
        owner = owner,
        htmlUrl = htmlUrl,
        description = description,
        fork = fork ?: throw Util.missingProperty("fork", "fork", reader),
        url = url,
        forksUrl = forksUrl,
        keysUrl = keysUrl,
        collaboratorsUrl = collaboratorsUrl,
        teamsUrl = teamsUrl,
        hooksUrl = hooksUrl,
        issueEventsUrl = issueEventsUrl,
        eventsUrl = eventsUrl,
        assigneesUrl = assigneesUrl,
        branchesUrl = branchesUrl,
        tagsUrl = tagsUrl,
        blobsUrl = blobsUrl,
        gitTagsUrl = gitTagsUrl,
        gitRefsUrl = gitRefsUrl,
        treesUrl = treesUrl,
        statusesUrl = statusesUrl,
        languagesUrl = languagesUrl,
        stargazersUrl = stargazersUrl,
        contributorsUrl = contributorsUrl,
        subscribersUrl = subscribersUrl,
        subscriptionsUrl = subscriptionsUrl,
        commitsUrl = commitsUrl,
        gitCommitsUrl = gitCommitsUrl,
        commentsUrl = commentsUrl,
        issueCommentsUrl = issueCommentsUrl,
        contentsUrl = contentsUrl,
        compareUrl = compareUrl,
        mergesUrl = mergesUrl,
        archiveUrl = archiveUrl,
        downloadsUrl = downloadsUrl,
        issuesUrl = issuesUrl,
        pullsUrl = pullsUrl,
        milestonesUrl = milestonesUrl,
        notificationsUrl = notificationsUrl,
        labelsUrl = labelsUrl,
        releasesUrl = releasesUrl,
        deploymentsUrl = deploymentsUrl,
        createdAt = createdAt,
        updatedAt = updatedAt,
        pushedAt = pushedAt,
        gitUrl = gitUrl,
        sshUrl = sshUrl,
        cloneUrl = cloneUrl,
        svnUrl = svnUrl,
        homepage = homepage,
        size = size ?: throw Util.missingProperty("size", "size", reader),
        stargazersCount = stargazersCount ?: throw Util.missingProperty("stargazersCount",
            "stargazers_count", reader),
        watchersCount = watchersCount ?: throw Util.missingProperty("watchersCount",
            "watchers_count", reader),
        language = language,
        hasIssues = hasIssues ?: throw Util.missingProperty("hasIssues", "has_issues", reader),
        hasProjects = hasProjects ?: throw Util.missingProperty("hasProjects", "has_projects",
            reader),
        hasDownloads = hasDownloads ?: throw Util.missingProperty("hasDownloads", "has_downloads",
            reader),
        hasWiki = hasWiki ?: throw Util.missingProperty("hasWiki", "has_wiki", reader),
        hasPages = hasPages ?: throw Util.missingProperty("hasPages", "has_pages", reader),
        forksCount = forksCount ?: throw Util.missingProperty("forksCount", "forks_count", reader),
        mirrorUrl = mirrorUrl,
        archived = archived ?: throw Util.missingProperty("archived", "archived", reader),
        disabled = disabled ?: throw Util.missingProperty("disabled", "disabled", reader),
        openIssuesCount = openIssuesCount ?: throw Util.missingProperty("openIssuesCount",
            "open_issues_count", reader),
        allowForking = allowForking ?: throw Util.missingProperty("allowForking", "allow_forking",
            reader),
        isTemplate = isTemplate ?: throw Util.missingProperty("isTemplate", "is_template", reader),
        visibility = visibility,
        forks = forks ?: throw Util.missingProperty("forks", "forks", reader),
        openIssues = openIssues ?: throw Util.missingProperty("openIssues", "open_issues", reader),
        watchers = watchers ?: throw Util.missingProperty("watchers", "watchers", reader),
        defaultBranch = defaultBranch ?: throw Util.missingProperty("defaultBranch",
            "default_branch", reader),
        score = score ?: throw Util.missingProperty("score", "score", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: RepoSearchItemsResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    longAdapter.toJson(writer, value_.id)
    writer.name("node_id")
    nullableStringAdapter.toJson(writer, value_.nodeId)
    writer.name("name")
    nullableStringAdapter.toJson(writer, value_.name)
    writer.name("full_name")
    nullableStringAdapter.toJson(writer, value_.fullName)
    writer.name("private")
    booleanAdapter.toJson(writer, value_.`private`)
    writer.name("owner")
    nullableOwnerResponseAdapter.toJson(writer, value_.owner)
    writer.name("html_url")
    nullableStringAdapter.toJson(writer, value_.htmlUrl)
    writer.name("description")
    nullableStringAdapter.toJson(writer, value_.description)
    writer.name("fork")
    booleanAdapter.toJson(writer, value_.fork)
    writer.name("url")
    nullableStringAdapter.toJson(writer, value_.url)
    writer.name("forks_url")
    nullableStringAdapter.toJson(writer, value_.forksUrl)
    writer.name("keys_url")
    nullableStringAdapter.toJson(writer, value_.keysUrl)
    writer.name("collaborators_url")
    nullableStringAdapter.toJson(writer, value_.collaboratorsUrl)
    writer.name("teams_url")
    nullableStringAdapter.toJson(writer, value_.teamsUrl)
    writer.name("hooks_url")
    nullableStringAdapter.toJson(writer, value_.hooksUrl)
    writer.name("issue_events_url")
    nullableStringAdapter.toJson(writer, value_.issueEventsUrl)
    writer.name("events_url")
    nullableStringAdapter.toJson(writer, value_.eventsUrl)
    writer.name("assignees_url")
    nullableStringAdapter.toJson(writer, value_.assigneesUrl)
    writer.name("branches_url")
    nullableStringAdapter.toJson(writer, value_.branchesUrl)
    writer.name("tags_url")
    nullableStringAdapter.toJson(writer, value_.tagsUrl)
    writer.name("blobs_url")
    nullableStringAdapter.toJson(writer, value_.blobsUrl)
    writer.name("git_tags_url")
    nullableStringAdapter.toJson(writer, value_.gitTagsUrl)
    writer.name("git_refs_url")
    nullableStringAdapter.toJson(writer, value_.gitRefsUrl)
    writer.name("trees_url")
    nullableStringAdapter.toJson(writer, value_.treesUrl)
    writer.name("statuses_url")
    nullableStringAdapter.toJson(writer, value_.statusesUrl)
    writer.name("languages_url")
    nullableStringAdapter.toJson(writer, value_.languagesUrl)
    writer.name("stargazers_url")
    nullableStringAdapter.toJson(writer, value_.stargazersUrl)
    writer.name("contributors_url")
    nullableStringAdapter.toJson(writer, value_.contributorsUrl)
    writer.name("subscribers_url")
    nullableStringAdapter.toJson(writer, value_.subscribersUrl)
    writer.name("subscriptions_url")
    nullableStringAdapter.toJson(writer, value_.subscriptionsUrl)
    writer.name("commits_url")
    nullableStringAdapter.toJson(writer, value_.commitsUrl)
    writer.name("git_commits_url")
    nullableStringAdapter.toJson(writer, value_.gitCommitsUrl)
    writer.name("comments_url")
    nullableStringAdapter.toJson(writer, value_.commentsUrl)
    writer.name("issue_comments_url")
    nullableStringAdapter.toJson(writer, value_.issueCommentsUrl)
    writer.name("contents_url")
    nullableStringAdapter.toJson(writer, value_.contentsUrl)
    writer.name("compare_url")
    nullableStringAdapter.toJson(writer, value_.compareUrl)
    writer.name("merges_url")
    nullableStringAdapter.toJson(writer, value_.mergesUrl)
    writer.name("archive_url")
    nullableStringAdapter.toJson(writer, value_.archiveUrl)
    writer.name("downloads_url")
    nullableStringAdapter.toJson(writer, value_.downloadsUrl)
    writer.name("issues_url")
    nullableStringAdapter.toJson(writer, value_.issuesUrl)
    writer.name("pulls_url")
    nullableStringAdapter.toJson(writer, value_.pullsUrl)
    writer.name("milestones_url")
    nullableStringAdapter.toJson(writer, value_.milestonesUrl)
    writer.name("notifications_url")
    nullableStringAdapter.toJson(writer, value_.notificationsUrl)
    writer.name("labels_url")
    nullableStringAdapter.toJson(writer, value_.labelsUrl)
    writer.name("releases_url")
    nullableStringAdapter.toJson(writer, value_.releasesUrl)
    writer.name("deployments_url")
    nullableStringAdapter.toJson(writer, value_.deploymentsUrl)
    writer.name("created_at")
    nullableStringAdapter.toJson(writer, value_.createdAt)
    writer.name("updated_at")
    nullableStringAdapter.toJson(writer, value_.updatedAt)
    writer.name("pushed_at")
    nullableStringAdapter.toJson(writer, value_.pushedAt)
    writer.name("git_url")
    nullableStringAdapter.toJson(writer, value_.gitUrl)
    writer.name("ssh_url")
    nullableStringAdapter.toJson(writer, value_.sshUrl)
    writer.name("clone_url")
    nullableStringAdapter.toJson(writer, value_.cloneUrl)
    writer.name("svn_url")
    nullableStringAdapter.toJson(writer, value_.svnUrl)
    writer.name("homepage")
    nullableStringAdapter.toJson(writer, value_.homepage)
    writer.name("size")
    intAdapter.toJson(writer, value_.size)
    writer.name("stargazers_count")
    intAdapter.toJson(writer, value_.stargazersCount)
    writer.name("watchers_count")
    intAdapter.toJson(writer, value_.watchersCount)
    writer.name("language")
    nullableStringAdapter.toJson(writer, value_.language)
    writer.name("has_issues")
    booleanAdapter.toJson(writer, value_.hasIssues)
    writer.name("has_projects")
    booleanAdapter.toJson(writer, value_.hasProjects)
    writer.name("has_downloads")
    booleanAdapter.toJson(writer, value_.hasDownloads)
    writer.name("has_wiki")
    booleanAdapter.toJson(writer, value_.hasWiki)
    writer.name("has_pages")
    booleanAdapter.toJson(writer, value_.hasPages)
    writer.name("forks_count")
    intAdapter.toJson(writer, value_.forksCount)
    writer.name("mirror_url")
    nullableStringAdapter.toJson(writer, value_.mirrorUrl)
    writer.name("archived")
    booleanAdapter.toJson(writer, value_.archived)
    writer.name("disabled")
    booleanAdapter.toJson(writer, value_.disabled)
    writer.name("open_issues_count")
    intAdapter.toJson(writer, value_.openIssuesCount)
    writer.name("allow_forking")
    booleanAdapter.toJson(writer, value_.allowForking)
    writer.name("is_template")
    booleanAdapter.toJson(writer, value_.isTemplate)
    writer.name("visibility")
    nullableStringAdapter.toJson(writer, value_.visibility)
    writer.name("forks")
    intAdapter.toJson(writer, value_.forks)
    writer.name("open_issues")
    intAdapter.toJson(writer, value_.openIssues)
    writer.name("watchers")
    intAdapter.toJson(writer, value_.watchers)
    writer.name("default_branch")
    intAdapter.toJson(writer, value_.defaultBranch)
    writer.name("score")
    intAdapter.toJson(writer, value_.score)
    writer.endObject()
  }
}
