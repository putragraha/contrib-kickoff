// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.nsystem.features.reposearch.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class RepoSearchResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<RepoSearchResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("total_count",
      "incomplete_results", "items")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(),
      "totalCount")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "incompleteResults")

  private val listOfRepoSearchItemsResponseAdapter: JsonAdapter<List<RepoSearchItemsResponse>> =
      moshi.adapter(Types.newParameterizedType(List::class.java,
      RepoSearchItemsResponse::class.java), emptySet(), "items")

  public override fun toString(): String = buildString(40) {
      append("GeneratedJsonAdapter(").append("RepoSearchResponse").append(')') }

  public override fun fromJson(reader: JsonReader): RepoSearchResponse {
    var totalCount: Long? = null
    var incompleteResults: Boolean? = null
    var items: List<RepoSearchItemsResponse>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> totalCount = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("totalCount",
            "total_count", reader)
        1 -> incompleteResults = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("incompleteResults", "incomplete_results", reader)
        2 -> items = listOfRepoSearchItemsResponseAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("items", "items", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return RepoSearchResponse(
        totalCount = totalCount ?: throw Util.missingProperty("totalCount", "total_count", reader),
        incompleteResults = incompleteResults ?: throw Util.missingProperty("incompleteResults",
            "incomplete_results", reader),
        items = items ?: throw Util.missingProperty("items", "items", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: RepoSearchResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("total_count")
    longAdapter.toJson(writer, value_.totalCount)
    writer.name("incomplete_results")
    booleanAdapter.toJson(writer, value_.incompleteResults)
    writer.name("items")
    listOfRepoSearchItemsResponseAdapter.toJson(writer, value_.items)
    writer.endObject()
  }
}
