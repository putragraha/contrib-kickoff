// Generated by Dagger (https://dagger.dev).
package com.nsystem.features.reposearch.data.repository;

import com.nsystem.core.ApplicationDatabase;
import com.nsystem.features.reposearch.data.api.RepoApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepoDataRepository_Factory implements Factory<RepoDataRepository> {
  private final Provider<ApplicationDatabase> applicationDatabaseProvider;

  private final Provider<RepoApi> repoApiProvider;

  public RepoDataRepository_Factory(Provider<ApplicationDatabase> applicationDatabaseProvider,
      Provider<RepoApi> repoApiProvider) {
    this.applicationDatabaseProvider = applicationDatabaseProvider;
    this.repoApiProvider = repoApiProvider;
  }

  @Override
  public RepoDataRepository get() {
    return newInstance(applicationDatabaseProvider.get(), repoApiProvider.get());
  }

  public static RepoDataRepository_Factory create(
      Provider<ApplicationDatabase> applicationDatabaseProvider,
      Provider<RepoApi> repoApiProvider) {
    return new RepoDataRepository_Factory(applicationDatabaseProvider, repoApiProvider);
  }

  public static RepoDataRepository newInstance(ApplicationDatabase applicationDatabase,
      RepoApi repoApi) {
    return new RepoDataRepository(applicationDatabase, repoApi);
  }
}
