// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.nsystem.features.reposearch.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class OwnerResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<OwnerResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("login", "id", "node_id",
      "avatar_url", "gravatar_id", "url", "html_url", "followers_url", "following_url", "gists_url",
      "starred_url", "subscriptions_url", "organizations_url", "repos_url", "events_url",
      "received_events_url", "type", "site_admin")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "login")

  private val longAdapter: JsonAdapter<Long> = moshi.adapter(Long::class.java, emptySet(), "id")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "siteAdmin")

  public override fun toString(): String = buildString(35) {
      append("GeneratedJsonAdapter(").append("OwnerResponse").append(')') }

  public override fun fromJson(reader: JsonReader): OwnerResponse {
    var login: String? = null
    var id: Long? = null
    var nodeId: String? = null
    var avatarUrl: String? = null
    var gravatarId: String? = null
    var url: String? = null
    var htmlUrl: String? = null
    var followersUrl: String? = null
    var followingUrl: String? = null
    var gistsUrl: String? = null
    var starredUrl: String? = null
    var subscriptionsUrl: String? = null
    var organizationsUrl: String? = null
    var reposUrl: String? = null
    var eventsUrl: String? = null
    var receivedEventsUrl: String? = null
    var type: String? = null
    var siteAdmin: Boolean? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> login = nullableStringAdapter.fromJson(reader)
        1 -> id = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        2 -> nodeId = nullableStringAdapter.fromJson(reader)
        3 -> avatarUrl = nullableStringAdapter.fromJson(reader)
        4 -> gravatarId = nullableStringAdapter.fromJson(reader)
        5 -> url = nullableStringAdapter.fromJson(reader)
        6 -> htmlUrl = nullableStringAdapter.fromJson(reader)
        7 -> followersUrl = nullableStringAdapter.fromJson(reader)
        8 -> followingUrl = nullableStringAdapter.fromJson(reader)
        9 -> gistsUrl = nullableStringAdapter.fromJson(reader)
        10 -> starredUrl = nullableStringAdapter.fromJson(reader)
        11 -> subscriptionsUrl = nullableStringAdapter.fromJson(reader)
        12 -> organizationsUrl = nullableStringAdapter.fromJson(reader)
        13 -> reposUrl = nullableStringAdapter.fromJson(reader)
        14 -> eventsUrl = nullableStringAdapter.fromJson(reader)
        15 -> receivedEventsUrl = nullableStringAdapter.fromJson(reader)
        16 -> type = nullableStringAdapter.fromJson(reader)
        17 -> siteAdmin = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("siteAdmin",
            "site_admin", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return OwnerResponse(
        login = login,
        id = id ?: throw Util.missingProperty("id", "id", reader),
        nodeId = nodeId,
        avatarUrl = avatarUrl,
        gravatarId = gravatarId,
        url = url,
        htmlUrl = htmlUrl,
        followersUrl = followersUrl,
        followingUrl = followingUrl,
        gistsUrl = gistsUrl,
        starredUrl = starredUrl,
        subscriptionsUrl = subscriptionsUrl,
        organizationsUrl = organizationsUrl,
        reposUrl = reposUrl,
        eventsUrl = eventsUrl,
        receivedEventsUrl = receivedEventsUrl,
        type = type,
        siteAdmin = siteAdmin ?: throw Util.missingProperty("siteAdmin", "site_admin", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: OwnerResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("login")
    nullableStringAdapter.toJson(writer, value_.login)
    writer.name("id")
    longAdapter.toJson(writer, value_.id)
    writer.name("node_id")
    nullableStringAdapter.toJson(writer, value_.nodeId)
    writer.name("avatar_url")
    nullableStringAdapter.toJson(writer, value_.avatarUrl)
    writer.name("gravatar_id")
    nullableStringAdapter.toJson(writer, value_.gravatarId)
    writer.name("url")
    nullableStringAdapter.toJson(writer, value_.url)
    writer.name("html_url")
    nullableStringAdapter.toJson(writer, value_.htmlUrl)
    writer.name("followers_url")
    nullableStringAdapter.toJson(writer, value_.followersUrl)
    writer.name("following_url")
    nullableStringAdapter.toJson(writer, value_.followingUrl)
    writer.name("gists_url")
    nullableStringAdapter.toJson(writer, value_.gistsUrl)
    writer.name("starred_url")
    nullableStringAdapter.toJson(writer, value_.starredUrl)
    writer.name("subscriptions_url")
    nullableStringAdapter.toJson(writer, value_.subscriptionsUrl)
    writer.name("organizations_url")
    nullableStringAdapter.toJson(writer, value_.organizationsUrl)
    writer.name("repos_url")
    nullableStringAdapter.toJson(writer, value_.reposUrl)
    writer.name("events_url")
    nullableStringAdapter.toJson(writer, value_.eventsUrl)
    writer.name("received_events_url")
    nullableStringAdapter.toJson(writer, value_.receivedEventsUrl)
    writer.name("type")
    nullableStringAdapter.toJson(writer, value_.type)
    writer.name("site_admin")
    booleanAdapter.toJson(writer, value_.siteAdmin)
    writer.endObject()
  }
}
